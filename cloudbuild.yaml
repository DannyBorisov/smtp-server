steps:
  # Build Docker image (TypeScript compilation happens inside Docker)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/smtp-server:$BUILD_ID', '.']

  # Push to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/smtp-server:$BUILD_ID']

  # Create/Update Compute Engine VM for SMTP server
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      # Create VM if it doesn't exist, otherwise just update the container
      if ! gcloud compute instances describe smtp-server --zone=us-central1-a --quiet; then
        echo "Creating new SMTP server VM..."
        gcloud compute instances create-with-container smtp-server \
          --container-image=gcr.io/$PROJECT_ID/smtp-server:$BUILD_ID \
          --container-env=NODE_ENV=production,SMTP_HOST=0.0.0.0,SMTP_PORT=25 \
          --machine-type=f1-micro \
          --zone=us-central1-a \
          --tags=smtp-server \
          --container-restart-policy=always \
          --boot-disk-size=10GB \
          --boot-disk-type=pd-standard
      else
        echo "Updating existing SMTP server VM..."
        gcloud compute instances update-container smtp-server \
          --container-image=gcr.io/$PROJECT_ID/smtp-server:$BUILD_ID \
          --zone=us-central1-a
      fi

  # Ensure firewall rules exist for SMTP
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      # Create firewall rule if it doesn't exist
      if ! gcloud compute firewall-rules describe allow-smtp --quiet; then
        gcloud compute firewall-rules create allow-smtp \
          --allow tcp:25,tcp:587,tcp:2525 \
          --source-ranges 0.0.0.0/0 \
          --target-tags smtp-server \
          --description "Allow SMTP traffic"
      fi

images:
  - 'gcr.io/$PROJECT_ID/smtp-server:$BUILD_ID'

options:
  logging: CLOUD_LOGGING_ONLY